#!/usr/bin/env ruby

def get_full_command
  [fossil_command.join(' '), git_command.join(' ')].join('|') << github_command
end

def fossil_command
  cmd = ['fossil export --git']

  cmd << "--import-marks #{fossil_marks}" if all_marks?
  cmd << "--export-marks #{fossil_marks}"
  cmd << get_repository
end

def git_command
  cmd = ['git fast-import']

  cmd << "--import-marks=#{git_marks}" if all_marks?
  cmd << "--export-marks=#{git_marks}"
end

def github_command
  '; git checkout trunk; git push'
end

def all_marks?
  (File.exist? git_marks and File.exist? fossil_marks)
end

def fossil_marks
  File.join(fossil_path, 'fossil.marks')
end

def git_marks
  File.join(fossil_path, 'git.marks')
end

def fossil_path
  (get_option('-c') or Dir.pwd)
end

def get_option opt, default=nil
  ARGV.index(opt).tap do |val|
    return val ? (ARGV.delete_at val and ARGV.delete_at val) : default
  end
end

def get_repository
  File.absolute_path(
    `fossil status`.split(/\n/).select do |line|
      line.match /^repository: +/
    end.first.sub /^repository: +/, ''
  )
end

name = File.basename $0

help = <<-EOF

  FossGit provides a simple tool for creating Git mirrors of Fossil
  repositories.  To use it, you need:
  
  1. both Fossil SCM and Git installed
  2. a Fossil repository to mirror with an open checkout
  3. a Git repository to use as a mirror

  USAGE:  #{name} -h
          #{name} [-c <CHECKOUT>] <GITREPO>

  OPTIONS/ARGUMENTS:

      -h              Display this help text and exit, ignoring all other
                      arguments.

      -c CHECKOUT     Specify the location of your Fossil repository's open
                      checkout, CHECKOUT.  This is optional; you may simply use
                      this tool from within an open checkout of your Fossil
                      repository instead.

      GITREPO         Specify the location of your Git repository, GITREPO.

  EXAMPLES:

      $ fossgit -h

      $ fossgit -c ~/fossil_checkouts/projectname ~/git/projectname

      $ cd ~/fossil_checkouts/projectname && fossgit ~/git/projectname

EOF

if $0 == __FILE__
  if ARGV.include? '-h'
    puts help
    exit
  end

  full_command = get_full_command

  git_path = ARGV.shift

  if git_path.to_s.empty?
    puts 'Error!  No Git path provided.'
    exit!
  end

  Dir.chdir git_path

  unless system 'git status'
    print 'Error!  This path is not a Git repository:'
    puts Dir.pwd
    exit!
  end

  system full_command
end
