#!/usr/bin/env ruby

def get_option opt, default=nil
  ARGV.index(opt).tap do |val|
    return val ? (ARGV.delete_at val and ARGV.delete_at val) : default
  end
end

def get_repository
  File.absolute_path(
    `fossil status`.split(/\n/).select do |line|
      line.match /^repository: +/
    end.first.sub /^repository: +/, ''
  )
end

@name = File.basename $0

help = <<-EOF

  FossGit provides a simple tool for creating Git mirrors of Fossil
  repositories.  To use it, you need:
  
  1. both Fossil SCM and Git installed
  2. a Fossil repository to mirror with an open checkout
  3. a Git repository to use as a mirror

  USAGE:  #{@name} -h
          #{@name} [-c <CHECKOUT>] <GITREPO>

  OPTIONS/ARGUMENTS:

      -h              Display this help text and exit, ignoring all other
                      arguments.

      -c CHECKOUT     Specify the location of your Fossil repository's open
                      checkout, CHECKOUT.  This is optional; you may simply use
                      this tool from within an open checkout of your Fossil
                      repository instead.

      GITREPO         Specify the location of your Git repository, GITREPO.

  EXAMPLES:

      $ fossgit -h

      $ fossgit -c ~/fossil_checkouts/projectname ~/git/projectname

      $ cd ~/fossil_checkouts/projectname && fossgit ~/git/projectname

EOF

if ARGV.first == '-h'
  puts help
  exit
end

@fossil_path = (get_option('-c') or Dir.pwd)
@fossil_marks = File.join @fossil_path, 'fossil.marks'

@git_path = ARGV.shift
@git_marks = File.join @fossil_path, 'git.marks'

if @git_path.to_s.empty?
  puts 'Error!  No Git path provided.'
  exit!
end

fossil_command = ['fossil export --git']
git_command = ['git fast-import']

if File.exist? @git_marks and File.exist? @fossil_marks
  fossil_command << "--import-marks #{@fossil_marks}"
  git_command << "--import-marks=#{@git_marks}"
end

fossil_command << "--export-marks #{@fossil_marks}"
fossil_command << get_repository

git_command << "--export-marks=#{@git_marks}"

full_command = [fossil_command.join(' '), git_command.join(' ')].join '|'

Dir.chdir @git_path

if system 'git status'
  system full_command
else
  print 'Error!  This path is not a Git repository:'
  puts Dir.pwd
  exit!
end
