#!/usr/bin/env ruby

@fossil_repository = nil

def mirror_command
  [fossil_command, sed_command, git_command].join '|'
end

def sed_command
  %q{sed 's/^\(committer \+\)\([^ ]\+@[^ ]\+\)\( *<\)\(\w\+\)\(>.*\)$/\1\4\3\2\5/'}
end

def fossil_command
  cmd = ['fossil export --git']

  cmd << "--import-marks #{fossil_marks}" if update_export?
  cmd << "--export-marks #{fossil_marks}"
  cmd << fossil_repository

  cmd.join ' '
end

def corrected_fossil_export
  committer_mail_name_plus = /^(committer\s+)(\S+@\S+)(\s*<)(\w+)(>.*)$/

  `#{fossil_command}`.split("\n").collect do |line|
    if line.match committer_mail_name_plus
      "#{$1}#{$4}#{$3}#{$2}#{$5}"
    else
      line
    end
  end
end

def git_command
  cmd = ['git fast-import']

  cmd << "--import-marks=#{git_marks}" if update_export?
  cmd << "--export-marks=#{git_marks}"

  cmd.join ' '
end

def github_command
  '; git checkout trunk; git push origin trunk'
end

def update_export?
  File.exist? git_marks and File.exist? fossil_marks
end

def fossil_marks
  fossil_file 'fossil.marks'
end

def git_marks
  fossil_file 'git.marks'
end

def fossil_file filename
  File.join fossil_path, filename
end

def fossil_path
  get_option '-c' or Dir.pwd
end

def get_option opt, default=nil
  ARGV.index(opt).tap do |val|
    return val ? (ARGV.delete_at val and ARGV.delete_at val) : default
  end
end

def fossil_repository
  idregex = /^repository: +/

  @fossil_repository ||= File.absolute_path(
    `fossil status`.split(/\n/).select do |line|
      line.match idregex
    end.first.sub idregex, ''
  )
end

name = File.basename $0

help = <<-EOF

  FossGit provides a simple tool for creating Git mirrors of Fossil
  repositories.  To use it, you need:
  
  1. both Fossil SCM and Git installed
  2. a Fossil repository to mirror with an open checkout
  3. a Git repository to use as a mirror

  USAGE:  #{name} -h
          #{name} [-c <CHECKOUT>] [-l] <GITREPO>
          #{name} -x

      By default, when exporting to local Git repository GITREPO, #{name}
      attempts to push updates to a configured upstream Git repository.  It
      harmlessly fails to push if no upstream repository is configured for the
      local Git repository.

  OPTIONS/ARGUMENTS:

      -h              Display this help text and exit, ignoring all other
                      arguments.

      -c CHECKOUT     Specify the location of your Fossil repository's open
                      checkout, CHECKOUT.  This is optional; you may simply use
                      this tool from within an open checkout of your Fossil
                      repository instead.

      -l              Perform local-only mirror operations, without trying to
                      push Git updates to a remote repository.  By default,
                      #{name} tries to push to an upstream Git repository
                      whenever it exports from Fossil to Git.

      -x              Dump export to STDOUT rather than sending it to Git.
                      This overrides the `-l` option and GITREPO argument, if
                      present.

      GITREPO         Specify the location of your local Git repository.

  EXAMPLES:

      $ fossgit -h

      $ fossgit -c ~/fossil_checkouts/projectname ~/git/projectname

      $ cd ~/fossil_checkouts/projectname && fossgit ~/git/projectname

EOF

if $0 == __FILE__
  if ARGV.include? '-h'
    puts help
    exit
  elsif ARGV.include? '-x'
    puts `#{fossil_command}|#{sed_command}`
    exit
  else
    command_line = mirror_command
    command_line << push_command unless ARGV.delete '-l'

    git_path = ARGV.shift

    if git_path.to_s.empty?
      puts 'Error!  No Git path provided.'
      exit!
    else
      Dir.chdir git_path
    end

    if system 'git status'
      system command_line
    else
      print 'Error!  This path is not a Git repository:'
      puts Dir.pwd
      exit!
    end
  end
end
