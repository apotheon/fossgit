#!/usr/bin/env ruby
require 'fossgit'

@fg = FossGit.new Dir.pwd

def mirror_command
  [fossil_command, sed_command, git_command].join '|'
end

def sed_command
  %q{sed 's/^\(committer \+\)\([^ ]\+@[^ ]\+\)\( *<\)\(\w\+\)\(>.*\)$/\1\4\3\2\5/'}
end

def fossil_command
  cmd = ['fossil export --git']

  cmd << "--import-marks #{fossil_marks}" if update_export?
  cmd << "--export-marks #{fossil_marks}"
  cmd << @fg.fossil_repository

  cmd.join ' '
end

def git_command
  cmd = ['git fast-import']

  cmd << "--import-marks=#{git_marks}" if update_export?
  cmd << "--export-marks=#{git_marks}"

  cmd.join ' '
end

def push_command
  '; git checkout trunk; git push origin trunk'
end

def update_export?
  File.exist? git_marks and File.exist? fossil_marks
end

def fossil_marks
  fossil_file 'fossil.marks'
end

def git_marks
  fossil_file 'git.marks'
end

def fossil_file filename
  File.join fossil_path, filename
end

def fossil_path
  get_option '-c' or Dir.pwd
end

def get_option opt, default=nil
  ARGV.index(opt).tap do |val|
    return val ? (ARGV.delete_at val and ARGV.delete_at val) : default
  end
end

def option_switch? long_name
  ARGV.delete "-#{long_name[0]}" or ARGV.delete "--#{long_name}"
end

name = File.basename $0

if option_switch? 'help'
  puts FossGit.help_text name
  exit
elsif option_switch? 'version'
  puts [name, FossGit.version].join ' '
elsif option_switch? 'text-export'
  puts `#{fossil_command}|#{sed_command}`
  exit
else
  command_line = mirror_command
  command_line << push_command unless option_switch? 'local'

  git_path = ARGV.shift

  if git_path.to_s.empty?
    STDERR.puts 'Error!  No Git path provided.'
    exit!
  elsif Dir.exist? git_path
    Dir.chdir git_path
  else
    STDERR.puts %Q{Error!  Invalid Git path "#{git_path}" provided.}
    exit!
  end

  if system 'git status'
    system command_line
  else
    STDERR.print %Q{Error!  Invalid Git repository "#{Dir.pwd}" provided.}
    exit!
  end
end
