#!/usr/bin/env ruby
require 'fossgit'
require 'yaml'

def get_option opt, default=nil
  ARGV.index(opt).tap do |val|
    return val ? (ARGV.delete_at val and ARGV.delete_at val) : default
  end
end

def option_switch? long_name
  ARGV.delete "-#{long_name[0]}" or ARGV.delete "--#{long_name}"
end

@fg = FossGit.new (get_option '-c' or Dir.pwd)

def mirror_command
  [@fg.fossil_command, sed_command, git_command].join '|'
end

def sed_command
  %q{sed 's/^\(committer \+\)\([^ ]\+@[^ ]\+\)\( *<\)\(\w\+\)\(>.*\)$/\1\4\3\2\5/'}
end

def git_command
  cmd = ['git fast-import']

  cmd << "--import-marks=#{@fg.git_marks}" if @fg.update_export?
  cmd << "--export-marks=#{@fg.git_marks}"

  cmd.join ' '
end

def push_command
  '; git checkout trunk; git push origin trunk'
end

name = File.basename $0

config_file = '.fossgit'
home_config = File.join(ENV['HOME'], config_file)

@config = Hash.new

if File.exist? home_config
  @config = YAML.load_file home_config
end

if File.exist? config_file
  YAML.load_file(config_file).tap do |local|
    local.each_key {|k| @config[k] = local[k] }
  end
end

if option_switch? 'help'
  puts FossGit.help_text name
  exit
elsif option_switch? 'version'
  puts [name, FossGit.version].join ' '
elsif option_switch? 'text-export'
  puts `#{@fg.fossil_command}|#{sed_command}`
  exit
else
  command_line = mirror_command
  command_line << push_command unless option_switch? 'local'

  gitpath = ARGV.shift or @config['gitpath']

  if gitpath.to_s.empty?
    STDERR.puts 'Error!  No Git path provided.'
    exit!
  elsif Dir.exist? gitpath
    Dir.chdir gitpath
  else
    STDERR.puts %Q{Error!  Invalid Git path "#{gitpath}" provided.}
    exit!
  end

  if system 'git status'
    system command_line
  else
    STDERR.print %Q{Error!  Invalid Git repository "#{Dir.pwd}" provided.}
    exit!
  end
end
