#!/usr/bin/env ruby
require 'fossgit'
require 'fossgit/cli'

@cli = CLI.new ARGV, File.basename($0)
@fg = FossGit.new (@cli.get_option('checkout') or Dir.pwd)

Dir.chdir @fg.checkout_path

if @cli.config['gitdir'] and @fg.project_name
  @cli.config['gitrepo'] ||= File.join(@cli.config['gitdir'], @fg.project_name)
end

@cli.parse_switches %w(all help local newgit text-export version)

if @cli.switches['help']
  puts @cli.help_text
  exit
elsif @cli.switches['version']
  puts @cli.name + ' ' + FossGit.version
elsif @cli.switches['text-export']
  system @fg.text_export_command
  exit
else
  if remotes = @cli.get_option 'remotes'
    remotes = remotes.split ','
  end

  ### NO MORE OPTION PARSING

  gitrepo = (@cli.args.shift or @cli.config['gitrepo'])

  unless remotes or @cli.switches['local']
    if @cli.switches['all']
      remotes = @fg.git_remotes(gitrepo)
    elsif @cli.remotes and not @cli.switches['newgit']
      remotes = (@cli.remotes == 'all') ? @fg.git_remotes(gitrepo) : @cli.remotes
    else
      remotes = ['origin']
    end
  end

  hasgit = Dir.exist? gitrepo

  if gitrepo.to_s.empty?
    STDERR.puts 'Error!  No Git path provided.'
    exit!
  elsif @cli.switches['newgit'] and gitrepo
    if hasgit
      STDERR.puts %Q{Error!  Directory "#{gitrepo}" already exists.}
      exit!
    elsif Dir.mkdir gitrepo
      Dir.chdir(gitrepo)

      if `git init`.empty?
        STDERR.puts %{Error!  Cannot init Git within "#{gitrepo}".}
        exit!
      end
    else
      STDERR.puts %Q{Error!  Cannot create directory "#{gitrepo}".}
      exit!
    end
  elsif @cli.switches['newgit']
    STDERR.puts %Q{Error!  Name for new Git repository unknown.}
    exit!
  elsif hasgit
    Dir.chdir gitrepo
  else
    STDERR.puts %Q{Error!  Invalid Git path "#{gitrepo}" provided.}
    exit!
  end

  if system 'git status'
    if @cli.switches['local']
      system @fg.mirror_command
    elsif remotes.empty?
      STDERR.print %Q{Error!  Git repository "#{Dir.pwd}" has no remotes.}
      exit!
    else
      @fg.push_remote_list! remotes
    end
  else
    STDERR.print %Q{Error!  Invalid Git repository "#{Dir.pwd}" provided.}
    exit!
  end
end
