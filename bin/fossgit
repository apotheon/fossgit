#!/usr/bin/env ruby
require 'fossgit'
require 'fossgit/cli'
require 'yaml'

@cli = CLI.new ARGV, File.basename($0)

def project
  (YAML.load `fossil info|head -n 1`)['project-name']
end

def option_switch? long_name, args
  @cli.args.delete "-#{long_name[0]}" or @cli.args.delete "--#{long_name}"
end

@fg = FossGit.new (@cli.get_option('-c') or Dir.pwd)

def mirror_command
  [@fg.fossil_command, sed_command, git_command].join '|'
end

def sed_command
  %q{sed 's/^\(committer \+\)\([^ ]\+@[^ ]\+\)\( *<\)\(\w\+\)\(>.*\)$/\1\4\3\2\5/'}
end

def git_command
  cmd = ['git fast-import']

  cmd << "--import-marks=#{@fg.git_marks}" if @fg.update_export?
  cmd << "--export-marks=#{@fg.git_marks}"

  cmd.join ' '
end

def push_command gitremote
  "; git checkout trunk; git push #{gitremote} trunk"
end

if @cli.config['gitdir'] and not @cli.config['gitrepo']
  @cli.config['gitrepo'] = (File.join @cli.config['gitdir'], project)
end

if option_switch? 'help', @cli.args
  puts @cli.help_text
  exit
elsif option_switch? 'version', @cli.args
  puts [@cli.name, FossGit.version].join ' '
elsif option_switch? 'text-export', @cli.args
  puts `#{@fg.fossil_command}|#{sed_command}`
  exit
else
  opts = Hash.new
  opts[:local] = option_switch? 'local', @cli.args
  opts[:all] = option_switch? 'all', @cli.args

  remotes = (@cli.get_option '-r')

  gitrepo = (@cli.args.shift or @cli.config['gitrepo'])

  if gitrepo.to_s.empty?
    STDERR.puts 'Error!  No Git path provided.'
    exit!
  elsif Dir.exist? gitrepo
    Dir.chdir gitrepo
  else
    STDERR.puts %Q{Error!  Invalid Git path "#{gitrepo}" provided.}
    exit!
  end

  if remotes
    remotes = remotes.split ','
  else
    if opts[:all]
      remotes = @fg.git_remotes gitrepo
    else
      remotes = ['origin']
    end
  end

  if system 'git status'
    if opts[:local]
      system mirror_command
    else
      remotes.each do |gitremote|
        puts "PUSH TO: #{gitremote}"
        cmd_with_push = mirror_command + push_command(gitremote)
        system cmd_with_push
      end
    end
  else
    STDERR.print %Q{Error!  Invalid Git repository "#{Dir.pwd}" provided.}
    exit!
  end
end
